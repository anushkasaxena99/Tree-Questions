#include<bits/stdc++.h>
using namespace std;
class Node 
{ 
    public:
    int data; 
    Node* left, * right; 
}; 

Node* newNode(int data) 
{ 
    Node* node = (Node*)malloc(sizeof(Node)); 
    node->data = data; 
    node->left = node->right = NULL; 
    return (node); 
}
Node *TraverseTree(int a[],Node *root,int i,int num )
{
    if(i<num)
    {
        Node * temp=newNode(a[i]);
        root=temp;
        
        root->left=TraverseTree(a,root->left,2*i+1,num);
        root->right=TraverseTree(a,root->right,2*i+2,num);
    }
    return root;

}
void vect (vector<int>& vector1, int a ,Node* root) 
{ 
    if (!root) 
        return;
    if (a == vector1.size()) 
        vector1.push_back(root->data); 
  
    else
        vector1[a] = max(vector1[a], root->data); 

    vect(vector1,a + 1, root->left); 
    vect(vector1, a + 1, root->right); 
} 
vector<int> greaterVal(Node* root) 
{ 
    vector<int> r; 
    vect(r,  0,root); 
    return r; 
}
int main()
{
    
    int num;
    cin>>num;
    int *a;
    a=new int[num];
    for(int i=0;i<num;i++)
    {
        cin>>a[i];
    }
    Node *root=TraverseTree(a,root,0,num);
    vector<int> r = greaterVal(root); 
    for (int i = 0; i < r.size(); i++) 
        cout << r[i] << "\n"; 
          
    return 0;
}
